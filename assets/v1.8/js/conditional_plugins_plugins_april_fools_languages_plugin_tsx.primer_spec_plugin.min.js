"use strict";
(self["webpackChunk"] = self["webpackChunk"] || []).push([["conditional_plugins_plugins_april_fools_languages_plugin_tsx"],{

/***/ "../node_modules/pig-latinizer/lib/pigLatin.js":
/*!*****************************************************!*\
  !*** ../node_modules/pig-latinizer/lib/pigLatin.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports) => {

var __webpack_unused_export__;

__webpack_unused_export__ = ({ value: true });

/**
 * Translates English to Pig Latin.
 */
var PigLatin = /** @class */ (function () {
    function PigLatin() {
        /** Words which should be excluded from translation. Case-sensitive. */
        this.exclusions = [];
    }

    /**
     * Translates an English string, containing an arbitrary amount of text, to Pig Latin.
     * Punctuation and whitespace are preserved, including blank lines.
     *
     * @param english The English string to translate.
     */
    PigLatin.prototype.translate = function (english) {

        if (!english) {
            return english;
        }

        return this._split(english).map(this._translateOne.bind(this)).join("");
    };

    /**
     * Translates a single fragment (word or separator) to Pig Latin.
     * @param fragment The word to translate or ignore, or separator to ignore.
     */
    PigLatin.prototype._translateOne = function (fragment) {
        // split into leading/trailing punctuation and the word itself;
        // part 1 = punctuation, or empty string
        // part 2 = the word up to any single apostrophe (if present)
        // part 3 = apostrophe & word characters following it, or empty string
        // part 4 = punctuation (including apostrophe if no word characters follow it), or empty string
        var parts = /^([\W_]*)([^\W_]+)(['\u2019\u02bc][^\W_]+|)([\W_]*)$/.exec(fragment);

        if (!parts) {
            return fragment; // we can't translate this non-word (it may be a separator)
        }

        var word = parts[2] + parts[3].substring(1);

        if (this.exclusions.indexOf(word) !== -1) {
            return fragment;
        }

        if (/[0-9]/.test(word)) {
            return fragment; // don't translate words which contain a digit
        }

        var isAllCaps = (word === word.toUpperCase() && word.length > 1);
        var firstLetterUpped = word[0].toUpperCase();

        if ("AEIOU".indexOf(firstLetterUpped) !== -1) {
            // begins with vowel; append "yay", but without doubling up a trailing "y"
            var lastChar = word[word.length - 1];
            var append = (lastChar === "y" || lastChar === "Y") ? "ay" : "yay";
            word += isAllCaps ? append.toUpperCase() : append;
        }
        else {
            // begins with a consonant; find the first vowel (including "y", except at the start of the word)
            var firstVowelPos = this._indexOfFirstVowel(word);

            if (firstVowelPos !== -1) {
                // (don't translate a word without vowels; maybe it's an acronym?)
                // move leading consonants to the end, hyphenating if we're doubling them up, and append "ay"
                var isCapitalized = (!isAllCaps && word[0] === firstLetterUpped);
                var consonants = word.substring(0, firstVowelPos);

                if (isCapitalized) {
                    consonants = consonants.toLowerCase();
                }

                var consonantsRepeated = (word.substr(-consonants.length).toUpperCase() === consonants.toUpperCase());
                var firstConsonantRepeated = (word.substr(-1).toUpperCase() === consonants[0].toUpperCase());
                var hyphen = (consonantsRepeated || firstConsonantRepeated) ? "-" : "";
                word = word.substring(consonants.length) + hyphen + consonants + (isAllCaps ? "AY" : "ay");

                if (isCapitalized) {
                    word = word[0].toUpperCase() + word.substring(1);
                }
            }
        }

        return parts[1] + word + parts[4]; // restore any leading and/or trailing punctuation
    };

    /**
     * Splits a string into an array of fragments, i.e. alternating words and separators.
     * @param str The string to split.
     */
    PigLatin.prototype._split = function (str) {
        // word separator = any whitespace, slash, underscore, Unicode dashes, regular dash
        var re = /[\s/_\u2010-\u2015-]+/gm;
        var fragments = [];
        var lastLastIndex = 0;

        while (true) {
            var result = re.exec(str);

            if (result === null) {
                // no more separators, but there might be one more word

                if (str && str.length > lastLastIndex) {
                    fragments.push(str.substring(lastLastIndex));
                }
                break;
            }

            var word = str.substring(lastLastIndex, result.index);
            fragments.push(word);
            var separator = str.substring(result.index, re.lastIndex);
            fragments.push(separator);
            lastLastIndex = re.lastIndex;
        }

        return fragments;
    };

    /**
     * Gets the index of the first vowel in the given word, or -1 if it contains no vowels.
     * @param word The word in which to find a vowel.
     */
    PigLatin.prototype._indexOfFirstVowel = function (word) {
        // split off any leading Ys (result[1]), then search whatever's left, if anything (result[2]), for the first vowel
        var result = /(y*)(.*)/i.exec(word);
        var index = result[2].search(/[aeiouy]/i);
        return (index === -1) ? -1 : result[1].length + index;
    };

    return PigLatin;
}());

exports["default"] = PigLatin;


/***/ }),

/***/ "./conditional_plugins/plugins/april_fools_languages.plugin.tsx":
/*!**********************************************************************!*\
  !*** ./conditional_plugins/plugins/april_fools_languages.plugin.tsx ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ AprilFoolsLanguagesPlugin)
/* harmony export */ });
/* harmony import */ var jsx_dom__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jsx-dom */ "../node_modules/jsx-dom/index.js");
/* harmony import */ var pig_latinizer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! pig-latinizer */ "../node_modules/pig-latinizer/lib/pigLatin.js");
/* harmony import */ var _utils_pirate_speak__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils/pirate_speak */ "./conditional_plugins/plugins/utils/pirate_speak.ts");
/* harmony import */ var _utils_upside_down__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils/upside_down */ "./conditional_plugins/plugins/utils/upside_down.ts");
/** @jsx JSXDom.h */




let currentLanguage = 'english';
async function AprilFoolsLanguagesPlugin() {
    insertLanguageToggleIfNeeded();
    insertDarkModeStylesIfNeeded();
    storeOriginalPageContentsIfNeeded();
    registerWindowEventListenerOnce();
}
///////////
//  UI  ///
///////////
function insertLanguageToggleIfNeeded() {
    const languageToggleId = 'primer-spec-april-fools-language-toggle';
    const existingLanguageToggle = document.querySelector(`#${languageToggleId}`);
    if (existingLanguageToggle) {
        return;
    }
    const settingsToggleContainer = document.querySelector('.primer-spec-settings-toggle');
    const settingsToggle = settingsToggleContainer?.querySelector('.primer-spec-hoverable');
    if (!settingsToggle || !settingsToggleContainer) {
        console.warn('Primer Spec: April Fools Languages joke: Could not find settings toggle');
        return;
    }
    const languageToggle = settingsToggle.cloneNode(true);
    languageToggle.id = languageToggleId;
    languageToggle.style.paddingRight = '1em';
    const languageIcon = languageToggle.querySelector('i.fa-cog');
    languageIcon?.classList.remove('fa-cog');
    languageIcon?.classList.add('fa-language');
    settingsToggleContainer.prepend(languageToggle);
    const languageToggleBtn = languageToggle.querySelector('button');
    languageToggleBtn?.addEventListener('click', () => toggleLanguagePopover());
}
const languagePopoverId = 'primer-spec-april-fools-language-popover';
function toggleLanguagePopover(opts) {
    const existingPopover = document.querySelector(`#${languagePopoverId}`);
    if (existingPopover) {
        existingPopover.remove();
    }
    else if (opts == null || !opts.doNotOpen) {
        const topbar = document.querySelector('header.primer-spec-topbar');
        topbar?.appendChild(jsx_dom__WEBPACK_IMPORTED_MODULE_0__.h("div", { id: languagePopoverId, class: "Popover position-absolute", style: "right: 8em; pointer-events: auto;" },
            jsx_dom__WEBPACK_IMPORTED_MODULE_0__.h("div", { class: "Popover-message Popover-message--right-top p-4 mr-2 Box color-shadow-large" },
                jsx_dom__WEBPACK_IMPORTED_MODULE_0__.h("button", { class: "btn-link position-absolute primer-spec-hoverable", style: "top: 0.25em; right: 0.5em; font-size: 20px;", onClick: () => toggleLanguagePopover() },
                    jsx_dom__WEBPACK_IMPORTED_MODULE_0__.h("i", { class: "fas fa-times" })),
                jsx_dom__WEBPACK_IMPORTED_MODULE_0__.h("h4", { class: "mb-2" }, "Change this page's \"language\""),
                jsx_dom__WEBPACK_IMPORTED_MODULE_0__.h("p", null, "April Fools! Try reading this page in another \"language\"."),
                jsx_dom__WEBPACK_IMPORTED_MODULE_0__.h("div", { style: "margin-bottom: 100px" },
                    jsx_dom__WEBPACK_IMPORTED_MODULE_0__.h("details", { class: "dropdown details-reset details-overlay d-inline-block" },
                        jsx_dom__WEBPACK_IMPORTED_MODULE_0__.h("summary", { class: "btn", "aria-haspopup": "true" },
                            jsx_dom__WEBPACK_IMPORTED_MODULE_0__.h("span", { id: `${languagePopoverId}-chosen-language` }, "Choose language"),
                            jsx_dom__WEBPACK_IMPORTED_MODULE_0__.h("div", { class: "dropdown-caret" })),
                        jsx_dom__WEBPACK_IMPORTED_MODULE_0__.h("ul", { class: "dropdown-menu dropdown-menu-se" },
                            jsx_dom__WEBPACK_IMPORTED_MODULE_0__.h("li", null, getLanguageButton('english', 'English')),
                            jsx_dom__WEBPACK_IMPORTED_MODULE_0__.h("li", null, getLanguageButton('pig-latin', 'Pig Latin')),
                            jsx_dom__WEBPACK_IMPORTED_MODULE_0__.h("li", null, getLanguageButton('pirate', 'Pirate')),
                            jsx_dom__WEBPACK_IMPORTED_MODULE_0__.h("li", null, getLanguageButton('upside-down', 'Upside Down'))))))));
        setCurrentLanguage(currentLanguage);
    }
}
function getLanguageButton(id, label) {
    return (jsx_dom__WEBPACK_IMPORTED_MODULE_0__.h("button", { id: `${languagePopoverId}-${id}`, class: "btn btn-link dropdown-item", onClick: () => {
            setCurrentLanguage(id);
        } }, label));
}
const DARK_MODE_STYLE_ID = 'primer-spec-april-fools-languages-dark-mode-styles';
function insertDarkModeStylesIfNeeded() {
    if (!document.querySelector(`#${DARK_MODE_STYLE_ID}`)) {
        document.head.appendChild(jsx_dom__WEBPACK_IMPORTED_MODULE_0__.h("style", null,
            ':root[data-theme-mode="dark"] .Popover .dropdown {',
            '  filter: invert(93%) hue-rotate(180deg);',
            '}',
            ':root[data-theme-mode="dark"] .Popover .dropdown .dropdown-item {',
            '  color: #24292e',
            '}',
            ':root[data-theme-mode="dark"] .Popover .dropdown .dropdown-item:hover {',
            '  color: #000;',
            '}',
            '.Popover {',
            '  color: var(--main-text-color)',
            '}',
            ':root[data-theme-mode="dark"] .Popover-message {',
            '  background-color: var(--code-block-header-bg-color);',
            '  border: 1px solid #30363d;',
            '}'));
    }
}
function setCurrentLanguage(languageId) {
    if (currentLanguage !== languageId) {
        currentLanguage = languageId;
        changePageLanguage(languageId);
    }
    const chosenLanguageLabel = document.querySelector(`#${languagePopoverId}-chosen-language`);
    const chosenLanguageButton = document.querySelector(`#${languagePopoverId}-${currentLanguage}`);
    if (chosenLanguageLabel && chosenLanguageButton) {
        chosenLanguageLabel.innerHTML = chosenLanguageButton.innerHTML;
    }
    // Close the dropdown
    document
        .querySelector('#primer-spec-april-fools-language-popover details.dropdown')
        ?.removeAttribute('open');
}
let windowEventRegistered = false;
function registerWindowEventListenerOnce() {
    if (!windowEventRegistered) {
        // If the user clicks outside the language popover, close the popover if it's
        // open.
        window.addEventListener('click', (event) => {
            const target = event?.target;
            if (target &&
                target.closest('#primer-spec-april-fools-language-popover, #primer-spec-april-fools-language-toggle') == null &&
                document.body.contains(target)) {
                toggleLanguagePopover({ doNotOpen: true });
            }
        });
        windowEventRegistered = true;
    }
}
/////////////////////////////
//  LANGUAGE CHANGE INFRA  //
/////////////////////////////
let originalPageContents = null;
function storeOriginalPageContentsIfNeeded() {
    if (!originalPageContents) {
        const mainContent = document.querySelector('main#primer-spec-preact-main-content');
        originalPageContents = mainContent?.innerHTML ?? null;
    }
}
async function changePageLanguage(languageId) {
    const TRANSLATOR_GETTERS = {
        english: getEnglishTranslator,
        'pig-latin': getPigLatinTranslator,
        pirate: getPirateTranslator,
        'upside-down': getUpsideDownTranslator,
    };
    if (originalPageContents && languageId in TRANSLATOR_GETTERS) {
        const translatedHtml = translate(originalPageContents, await TRANSLATOR_GETTERS[languageId]());
        setMainContentHTML(translatedHtml);
    }
}
function setMainContentHTML(html) {
    const mainContent = document.querySelector('main#primer-spec-preact-main-content');
    if (!mainContent) {
        return;
    }
    mainContent.innerHTML = html;
}
function translate(originalHtmlStr, translator) {
    const translateChildNodes = (parentEl) => {
        const newChildNodes = [...parentEl.childNodes].map((node) => {
            if (node.nodeType == Node.TEXT_NODE) {
                node.textContent = translator(node.textContent);
                return node;
            }
            else if (node.nodeType === Node.ELEMENT_NODE) {
                if (node.classList.contains('primer-spec-code-block') ||
                    node.classList.contains('primer-spec-code-block-processed') ||
                    node.classList.contains('primer-spec-mermaid-output')) {
                    return node;
                }
                const newNode = node.cloneNode(true);
                translateChildNodes(newNode);
                return newNode;
            }
            return node;
        });
        parentEl.innerHTML = '';
        parentEl.append(...newChildNodes);
    };
    const originalHtml = new DOMParser().parseFromString(originalHtmlStr, 'text/html').body;
    translateChildNodes(originalHtml);
    return originalHtml.innerHTML;
}
////////////////////////////////
//  LANGUAGE IMPLEMENTATIONS  //
////////////////////////////////
function getEnglishTranslator() {
    return Promise.resolve((text) => text);
}
async function getPigLatinTranslator() {
    const translator = new pig_latinizer__WEBPACK_IMPORTED_MODULE_1__["default"]();
    return (text) => (text ? translator.translate(text) : text);
}
async function getPirateTranslator() {
    return (text) => (text ? (0,_utils_pirate_speak__WEBPACK_IMPORTED_MODULE_2__.translate)(text) : text);
}
async function getUpsideDownTranslator() {
    return (text) => (text ? (0,_utils_upside_down__WEBPACK_IMPORTED_MODULE_3__.flipStringUpsideDown)(text) : text);
}


/***/ }),

/***/ "./conditional_plugins/plugins/utils/pirate_speak.ts":
/*!***********************************************************!*\
  !*** ./conditional_plugins/plugins/utils/pirate_speak.ts ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "translate": () => (/* binding */ translate)
/* harmony export */ });
/* unused harmony export dictionary */
/**
 * The `pirate-speak` software was originally written by
 * Michael Hadley <michaelwesthadley@gmail.com>.
 * https://github.com/mikewesthad/pirate-speak
 *
 * The software was modified for use with Primer Spec.
 *
 * The original `pirate-speak` package was licensed under the MIT License,
 * included below:
 *
 *******************
 *
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 Michael Hadley
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 *******************
 */
const dictionary = {
    address: "port o' call",
    admin: 'helm',
    am: 'be',
    an: 'a',
    and: "n'",
    are: 'be',
    award: 'prize',
    before: 'afore',
    belief: 'creed',
    between: 'betwixt',
    big: 'vast',
    bill: 'coin',
    bills: 'coins',
    boss: 'admiral',
    box: 'barrel',
    buddy: 'mate',
    business: 'company',
    businesses: 'companies',
    calling: "callin'",
    canada: 'Great North',
    cash: 'coin',
    cat: 'parrot',
    cheat: 'hornswaggle',
    comes: 'hails',
    comments: 'yer words',
    cool: 'shipshape',
    country: 'land',
    dashboard: 'shanty',
    dead: "in Davy Jones's Locker",
    disconnect: 'keelhaul',
    // do: "d'",
    dog: 'parrot',
    dollar: 'doubloon',
    dollars: 'doubloons',
    dude: 'pirate',
    employee: 'crew',
    everyone: 'all hands',
    eye: 'eye-patch',
    family: 'kin',
    fee: 'debt',
    food: 'grub',
    for: 'fer',
    friend: 'matey',
    friends: 'mateys',
    go: 'sail',
    good: 'jolly good',
    grave: "Davy Jones's Locker",
    group: 'maties',
    haha: 'yo ho',
    hahaha: 'yo ho ho',
    hahahaha: 'yo ho ho ho',
    hand: 'hook',
    happy: 'grog-filled',
    hello: 'ahoy',
    hey: 'ahoy',
    hi: 'ahoy',
    hotel: 'fleebag inn',
    i: 'me',
    "i'm": 'i be',
    'i’m': 'i be',
    internet: "series o' tubes",
    invalid: 'sunk',
    is: 'be',
    island: 'isle',
    "isn't": 'be not',
    'isn’t': 'be not',
    "it's": "'tis",
    'it’s': "'tis",
    jail: 'brig',
    kill: 'keelhaul',
    king: 'king',
    ladies: 'lasses',
    lady: 'lass',
    lawyer: 'scurvy land lubber',
    left: 'port',
    leg: 'peg',
    logout: 'walk the plank',
    lol: 'blimey',
    man: 'pirate',
    manager: 'admiral',
    money: 'doubloons',
    month: 'moon',
    my: 'me',
    never: 'nary',
    no: 'nay',
    not: 'nay',
    of: "o'",
    old: 'barnacle-covered',
    omg: 'shiver me timbers',
    over: "o'er",
    page: 'parchment',
    people: 'scallywags',
    person: 'scurvy dog',
    posted: 'tacked to the yardarm',
    president: 'king',
    prison: 'brig',
    quickly: 'smartly',
    really: 'verily',
    relative: 'kin',
    relatives: 'kin',
    religion: 'creed',
    restaurant: 'galley',
    right: 'starboard',
    rotf: "rollin' on the decks",
    say: 'cry',
    seconds: "ticks o' tha clock",
    shipping: 'cargo',
    small: 'puny',
    snack: 'grub',
    soldier: 'sailor',
    sorry: 'yarr',
    spouse: "ball 'n' chain",
    state: 'land',
    supervisor: "Cap'n",
    "that's": 'that be',
    // the: 'thar',
    thief: 'swoggler',
    them: "'em",
    // this: 'dis',
    to: "t'",
    together: "t'gether",
    treasure: 'booty',
    was: 'be',
    water: 'grog',
    we: 'our jolly crew',
    // "we're": "we's",
    // "we’re": "we's",
    with: "wit'",
    work: 'duty',
    yah: 'aye',
    yeah: 'aye',
    yes: 'aye',
    you: 'ye',
    "you're": 'you be',
    'you’re': 'you be',
    "you've": 'ye',
    'you’ve': 'ye',
    your: 'yer',
    yup: 'aye',
    // These translations were inspired by Facebook Pirate translations.
    around: 'roundabouts',
    cancel: 'retreat',
    event: 'grog fest',
    except: "exceptin'",
    jarnuary: 'januarrry',
    feburuary: 'februarrry',
    march: 'marrrch',
    april: "Month o' Showers",
    // may: "Month o' May",
    june: "Merry Month o' June",
    july: 'jul-aye',
    august: 'arrrgust',
    september: 'Septembarrr',
    october: 'Octobarrr',
    november: 'Novembarrr',
    december: 'Decembarrr',
    sunday: "Day o' the Sun",
    monday: 'munday',
    tuesday: "toos'day",
    wednesday: "Ondin's day",
    thursday: 'tharrrsday',
    saturday: 'satarrrday',
    today: "t'day",
    post: "scrawlin'",
    tweet: "scrawlin'",
    video: 'bewitched portrait',
    location: "port o' call",
    // Other thoughts
    file: 'parchment',
    browser: "bewtch'd portal",
    code: 'spells',
    program: 'magic spell',
    dependencies: 'dependen-seas',
    starter: 'starrrter',
};
function translateWord(word) {
    const pirateWord = dictionary[word.toLowerCase()];
    if (pirateWord === undefined)
        return word;
    return applyCase(word, pirateWord);
}
// Take the case from wordA and apply it to wordB
function applyCase(wordA, wordB) {
    // Exception to avoid words like "I" being converted to "ME"
    if (wordA.length === 1 && wordB.length !== 1)
        return wordB;
    // Uppercase
    if (wordA === wordA.toUpperCase())
        return wordB.toUpperCase();
    // Lowercase
    if (wordA === wordA.toLowerCase())
        return wordB.toLowerCase();
    // Capitialized
    const firstChar = wordA.slice(0, 1);
    const otherChars = wordA.slice(1);
    if (firstChar === firstChar.toUpperCase() &&
        otherChars === otherChars.toLowerCase()) {
        return wordB.slice(0, 1).toUpperCase() + wordB.slice(1).toLowerCase();
    }
    // Other cases
    return wordB;
}
function isLetter(character) {
    if (character.search(/[a-zA-Z'’-]/) === -1)
        return false;
    return true;
}
function translate(text) {
    let translatedText = '';
    // Loop through the text, one character at a time.
    let word = '';
    for (let i = 0; i < text.length; i += 1) {
        const character = text[i];
        // If the char is a letter, then we are in the middle of a word, so we
        // should accumulate the letter into the word variable
        if (isLetter(character)) {
            word += character;
        }
        // If the char is not a letter, then we hit the end of a word, so we
        // should translate the current word and add it to the translation
        else {
            if (word != '') {
                // If we've just finished a word, translate it
                const pirateWord = translateWord(word);
                translatedText += pirateWord;
                word = '';
            }
            translatedText += character; // Add the non-letter character
        }
    }
    // If we ended the loop before translating a word, then translate the final
    // word and add it to the translation.
    if (word !== '')
        translatedText += translateWord(word);
    return translatedText;
}


/***/ }),

/***/ "./conditional_plugins/plugins/utils/upside_down.ts":
/*!**********************************************************!*\
  !*** ./conditional_plugins/plugins/utils/upside_down.ts ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "flipStringUpsideDown": () => (/* binding */ flipStringUpsideDown)
/* harmony export */ });
/**
 * This module is adapted from the Upside Down Converter on fileformat.info:
 * https://www.fileformat.info/convert/text/upside-down-map.htm
 *
 * Which is itself derived from revfad.com (by David Faden):
 * https://www.revfad.com/flip.html
 *
 * This work, and the original work, is licensed under a Creative Commons
 * Attribution-Share Alike 3.0 Unported License.
 * http://creativecommons.org/licenses/by-sa/3.0/
 *
 */
function flipStringUpsideDown(aString) {
    const last = aString.length - 1;
    //Thanks to Brook Monroe for the
    //suggestion to use Array.join
    const result = new Array(aString.length);
    for (let i = last; i >= 0; --i) {
        const c = aString.charAt(i);
        const r = flipTable[c];
        result[last - i] = r != undefined ? r : c;
    }
    return result.join('');
}
const flipTable = {
    '\u0021': '\u00A1',
    '\u0022': '\u201E',
    '\u0026': '\u214B',
    '\u0027': '\u002C',
    '\u0028': '\u0029',
    '\u002E': '\u02D9',
    '\u0033': '\u0190',
    '\u0034': '\u152D',
    '\u0036': '\u0039',
    '\u0037': '\u2C62',
    '\u003B': '\u061B',
    '\u003C': '\u003E',
    '\u003F': '\u00BF',
    A: '\u2200',
    B: '\u10412',
    C: '\u2183',
    D: '\u25D6',
    E: '\u018E',
    F: '\u2132',
    G: '\u2141',
    J: '\u017F',
    K: '\u22CA',
    L: '\u2142',
    M: '\u0057',
    N: '\u1D0E',
    P: '\u0500',
    Q: '\u038C',
    R: '\u1D1A',
    T: '\u22A5',
    U: '\u2229',
    V: '\u1D27',
    Y: '\u2144',
    '\u005B': '\u005D',
    _: '\u203E',
    a: '\u0250',
    b: '\u0071',
    c: '\u0254',
    d: '\u0070',
    e: '\u01DD',
    f: '\u025F',
    g: '\u0183',
    h: '\u0265',
    i: '\u0131',
    j: '\u027E',
    k: '\u029E',
    l: '\u0283',
    m: '\u026F',
    n: '\u0075',
    r: '\u0279',
    t: '\u0287',
    v: '\u028C',
    w: '\u028D',
    y: '\u028E',
    '\u007B': '\u007D',
    '\u203F': '\u2040',
    '\u2045': '\u2046',
    '\u2234': '\u2235',
};
for (const i in flipTable) {
    flipTable[flipTable[i]] = i;
}


/***/ })

}]);
//# sourceMappingURL=conditional_plugins_plugins_april_fools_languages_plugin_tsx.primer_spec_plugin.min.js.map