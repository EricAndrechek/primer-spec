"use strict";
(self["webpackChunk"] = self["webpackChunk"] || []).push([["conditional_plugins_conditional_plugins_ts"],{

/***/ "./conditional_plugins/conditional_plugins.ts":
/*!****************************************************!*\
  !*** ./conditional_plugins/conditional_plugins.ts ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "executePlugins": () => (/* binding */ executePlugins)
/* harmony export */ });
/* harmony import */ var _should_load_plugin__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./should_load_plugin */ "./conditional_plugins/should_load_plugin.ts");
/* harmony import */ var _load_plugin__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./load_plugin */ "./conditional_plugins/load_plugin.ts");
/**
 * Conditional plugins are loaded asynchronously and are intentionally
 * isolated from the rest of Primer Spec. This is because this conditional
 * plugin framework was designed to build temporary pranks and jokes! (We don't
 * want these jokes to affect the page load time and the spec-reading
 * experience.)
 *
 * Plugins run based on conditions defined in the `shouldLoadPlugin()` method.
 * They can also be force-enabled by inserting
 * `?enable_<plugin_id>=1` in the URL.
 */


/**
 * When adding a new Plugin:
 * 1. Add the plugin definition to `./plugins/[your-plugin].plugin.ts`
 * 2. Choose a plugin ID, then add it to this list
 * 3. Add a condition to `shouldLoadPlugin()` for this plugin ID
 * 4. Update `loadPlugin()` to load the plugin definition from (1)
 */
const PLUGIN_IDS = ['halloween', 'april_fools_languages'];
const pluginsPromises = PLUGIN_IDS.filter((pluginId) => (0,_should_load_plugin__WEBPACK_IMPORTED_MODULE_0__.shouldLoadPlugin)(pluginId)).map((pluginId) => (0,_load_plugin__WEBPACK_IMPORTED_MODULE_1__.loadPlugin)(pluginId));
async function executePlugins(input) {
    const plugins = await Promise.all(pluginsPromises);
    await Promise.all(plugins.map(async (plugin) => {
        await plugin?.(input);
    }));
}


/***/ }),

/***/ "./conditional_plugins/load_plugin.ts":
/*!********************************************!*\
  !*** ./conditional_plugins/load_plugin.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "loadPlugin": () => (/* binding */ loadPlugin)
/* harmony export */ });
/**
 * Given a plugin ID, lazy-load the appropriate JS module containing the plugin
 * definition and return the plugin.
 *
 * Notice that we use the dynamic `import()` syntax. Webpack identifies this as
 * an opportunity to split the JS bundle, hence decreasing the size of the main
 * Primer Spec JS bundle. Additionally, we won't download the JS code for all
 * plugins, only the ones that need to run.
 */
async function loadPlugin(pluginId) {
    let plugin = null;
    switch (pluginId) {
        case 'halloween':
            plugin = (await __webpack_require__.e(/*! import() */ "conditional_plugins_plugins_halloween_plugin_tsx").then(__webpack_require__.bind(__webpack_require__, /*! ./plugins/halloween.plugin */ "./conditional_plugins/plugins/halloween.plugin.tsx"))).default;
            break;
        case 'april_fools_languages':
            plugin = (await __webpack_require__.e(/*! import() */ "conditional_plugins_plugins_april_fools_languages_plugin_tsx").then(__webpack_require__.bind(__webpack_require__, /*! ./plugins/april_fools_languages.plugin */ "./conditional_plugins/plugins/april_fools_languages.plugin.tsx"))).default;
            break;
    }
    return plugin;
}


/***/ }),

/***/ "./conditional_plugins/should_load_plugin.ts":
/*!***************************************************!*\
  !*** ./conditional_plugins/should_load_plugin.ts ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "shouldLoadPlugin": () => (/* binding */ shouldLoadPlugin)
/* harmony export */ });
/* harmony import */ var _utils_is_today_in_range__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils/is_today_in_range */ "./conditional_plugins/utils/is_today_in_range.ts");
/* harmony import */ var _utils_print_enabling_url_to_console__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils/print_enabling_url_to_console */ "./conditional_plugins/utils/print_enabling_url_to_console.ts");


function shouldLoadPlugin(pluginId) {
    if (window.PrimerSpecConfig.disableJokes) {
        return false;
    }
    const forceEnableOption = pluginForceEnableOption(pluginId);
    if (forceEnableOption !== null) {
        return forceEnableOption;
    }
    switch (pluginId) {
        case 'halloween':
            // Console message if we are *just* past the Halloween-mode end-date.
            // From November 5 until November 15.
            if ((0,_utils_is_today_in_range__WEBPACK_IMPORTED_MODULE_0__.isTodayInRange)({ month: _utils_is_today_in_range__WEBPACK_IMPORTED_MODULE_0__.Month.NOVEMBER, date: 5 }, { month: _utils_is_today_in_range__WEBPACK_IMPORTED_MODULE_0__.Month.NOVEMBER, date: 16 })) {
                (0,_utils_print_enabling_url_to_console__WEBPACK_IMPORTED_MODULE_1__.printEnablingURLToConsole)(pluginId, "ðŸ¤« Psst... It's well past halloween, but you can re-enable halloween mode by clicking this url:");
            }
            return (0,_utils_is_today_in_range__WEBPACK_IMPORTED_MODULE_0__.isTodayInRange)({ month: _utils_is_today_in_range__WEBPACK_IMPORTED_MODULE_0__.Month.OCTOBER, date: 25 }, { month: _utils_is_today_in_range__WEBPACK_IMPORTED_MODULE_0__.Month.NOVEMBER, date: 5 });
        case 'april_fools_languages':
            // Console message if we are *just* past the April Fools end-date.
            // From April 4 until April 13.
            if ((0,_utils_is_today_in_range__WEBPACK_IMPORTED_MODULE_0__.isTodayInRange)({ month: _utils_is_today_in_range__WEBPACK_IMPORTED_MODULE_0__.Month.APRIL, date: 4 }, { month: _utils_is_today_in_range__WEBPACK_IMPORTED_MODULE_0__.Month.APRIL, date: 13 })) {
                (0,_utils_print_enabling_url_to_console__WEBPACK_IMPORTED_MODULE_1__.printEnablingURLToConsole)(pluginId, "ðŸ¤« Psst... It's well past April Fools, but you can re-enable the April Fools Language prank by clicking this url:");
            }
            return (0,_utils_is_today_in_range__WEBPACK_IMPORTED_MODULE_0__.isTodayInRange)({ month: _utils_is_today_in_range__WEBPACK_IMPORTED_MODULE_0__.Month.MARCH, date: 29 }, { month: _utils_is_today_in_range__WEBPACK_IMPORTED_MODULE_0__.Month.APRIL, date: 4 });
    }
    return false;
}
function pluginForceEnableOption(pluginId) {
    const match = window.location.search.match(new RegExp(`enable_${pluginId}=([0|1])`));
    if (match) {
        return match[1] === '1';
    }
    return null;
}


/***/ }),

/***/ "./conditional_plugins/utils/is_today_in_range.ts":
/*!********************************************************!*\
  !*** ./conditional_plugins/utils/is_today_in_range.ts ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Month": () => (/* binding */ Month),
/* harmony export */   "isTodayInRange": () => (/* binding */ isTodayInRange)
/* harmony export */ });
var Month;
(function (Month) {
    Month[Month["JANUARY"] = 0] = "JANUARY";
    Month[Month["FEBRUARY"] = 1] = "FEBRUARY";
    Month[Month["MARCH"] = 2] = "MARCH";
    Month[Month["APRIL"] = 3] = "APRIL";
    Month[Month["MAY"] = 4] = "MAY";
    Month[Month["JUNE"] = 5] = "JUNE";
    Month[Month["JULY"] = 6] = "JULY";
    Month[Month["AUGUST"] = 7] = "AUGUST";
    Month[Month["SEPTEMBER"] = 8] = "SEPTEMBER";
    Month[Month["OCTOBER"] = 9] = "OCTOBER";
    Month[Month["NOVEMBER"] = 10] = "NOVEMBER";
    Month[Month["DECEMBER"] = 11] = "DECEMBER";
})(Month || (Month = {}));
/**
 * Return a boolean indicating whether today's date is between the dates
 * `lowerBound` (inclusive) and `upperBound` (exclusive).
 *
 * KNOWN LIMITATION: Doesn't work across years (for instance, around New Year).
 */
function isTodayInRange(lowerBound, upperBound) {
    const today = new Date();
    if (today.getMonth() < lowerBound.month) {
        return false;
    }
    let beyondLowerBound = true;
    if (today.getMonth() === lowerBound.month) {
        beyondLowerBound = today.getDate() >= lowerBound.date;
    }
    if (today.getMonth() !== upperBound.month) {
        return today.getMonth() < upperBound.month;
    }
    const withinUpperBound = today.getDate() < upperBound.date;
    return beyondLowerBound && withinUpperBound;
}


/***/ }),

/***/ "./conditional_plugins/utils/print_enabling_url_to_console.ts":
/*!********************************************************************!*\
  !*** ./conditional_plugins/utils/print_enabling_url_to_console.ts ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "printEnablingURLToConsole": () => (/* binding */ printEnablingURLToConsole)
/* harmony export */ });
function printEnablingURLToConsole(pluginId, message) {
    const enabled_url = new URL(window.location.href);
    enabled_url.searchParams.set(`enable_${pluginId}`, '1');
    console.info(`${message}\n`, enabled_url.toString());
}


/***/ })

}]);
//# sourceMappingURL=conditional_plugins_conditional_plugins_ts.primer_spec_plugin.min.js.map